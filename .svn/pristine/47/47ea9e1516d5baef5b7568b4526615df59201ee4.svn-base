package kr.or.ddit.main.map.service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.boot.configurationprocessor.json.JSONArray;
import org.springframework.boot.configurationprocessor.json.JSONObject;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import kr.or.ddit.main.map.controller.KakaoApiKeyProvider;
import kr.or.ddit.vo.ListingVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class MainKakaoGeocodeing {
	
	/* API 키 */
    private final KakaoApiKeyProvider apiKeyProvider;
	private final MainKakaoMapService service;
	
	@Scheduled(cron = "0 */30 * * * *")
	public void scheduledGeocodeingJob() {
		getCoordinatesFromDB();
	}
	
	public List<Map<String, String>> getCoordinatesFromDB() {
		String restApiKey = apiKeyProvider.getRestApiKey();
	    List<Map<String, String>> result = new ArrayList<>();
	    Set<String> processed = new HashSet<>();

	    try {
	        List<ListingVO> listingList = service.selectNotLatLngList();

	        for (ListingVO listing : listingList) {
	            String addr = listing.getLstgAdd();
	            if (addr == null || addr.isBlank() || !processed.add(addr)) continue;
	            
	            if (listing.getLstgLat() != null && listing.getLstgLng() != null) {
					log.debug("이미 좌표가 있는 매물: {}", addr);
					continue;
				}

	            String encoded = URLEncoder.encode("대한민국 " + addr, StandardCharsets.UTF_8);
	            String apiUrl = "https://dapi.kakao.com/v2/local/search/address.json?query=" + encoded;
	            
	            boolean success = false;
	            
	            for(int retry = 0; retry < 5 && !success; retry++) {
	            	HttpURLConnection conn = null;
	            	
	            	try {
	            		URL url = URI.create(apiUrl).toURL();
	            		conn = (HttpURLConnection) url.openConnection();
	            		conn.setRequestMethod("GET");
	            		conn.setRequestProperty("Authorization", "KakaoAK " + restApiKey);
	            	
	            		int responseCode = conn.getResponseCode();
	            		
	            		if (responseCode == 429) {
							log.warn("429 Too Many Requests - 재시도 {}회차 대기", retry + 1);
							Thread.sleep(3000);
							continue;
						} else if (responseCode == 400 || responseCode == 401 || responseCode == 403 || responseCode == 404) {
							log.error("지오코딩 실패 - 요청 오류 코드: {}", responseCode);
							break;
						} else if (responseCode != 200) {
							log.error("지오코딩 실패 - 응답코드: {}", responseCode);
							break;
						}
	            		
	            		try(BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))){
	            			StringBuilder responseBuilder = new StringBuilder();
	            			String line;
	            			while ((line = br.readLine()) != null) {
	            				responseBuilder.append(line);
	            			}
	            			
	            			JSONObject json = new JSONObject(responseBuilder.toString());
	            			JSONArray documents = json.getJSONArray("documents");
	            			
	            			if (documents.length() == 0) {
	            				log.warn("{} 주소로 검색된 결과가 없습니다.", addr);
	            				break;
	            			}
	            			
	            			JSONObject doc = documents.getJSONObject(0);  // 첫 번째 결과
	            			String lat = doc.optString("y", null);
	            			String lng = doc.optString("x", null);
	            			
	            			if (lat == null || lng == null) {
	            			    log.warn("[지오코딩 실패] {} → 좌표 없음 (lat/lng == null)", addr);
	            			    continue;
	            			}
	            			
	            			JSONObject roadAddr = doc.optJSONObject("road_address");
	            			JSONObject addrInfo = doc.optJSONObject("address");
	            			
	            			String fullAddress = roadAddr != null
	            				    ? roadAddr.optString("address_name", "도로명 주소 없음")
	            				    : (addrInfo != null ? addrInfo.optString("address_name", "지번 주소 없음") : "주소 없음");
	            			
	            			listing.setLstgLat(Double.parseDouble(lat));
	            			listing.setLstgLng(Double.parseDouble(lng));
	            			service.updateLatLng(listing);
	            			
	            			log.info("[지오코딩 성공] {} → {}, {} ({})", addr, lat, lng, fullAddress);
	            			
	            			result.add(Map.of(
	            					"address", addr,
	            					"lat", lat,
	            					"lng", lng
	            					));
	            			log.info("좌표 저장 완료 : {} -> {}, {}", addr, lat, lng);
	            			
	            			Thread.sleep(600);  
	            			success = true;
	            		}
	            } catch (Exception e) {
					log.error("지오코딩 중 예외 발생 : ({} 회차) : {}", retry + 1, e.getMessage(), e);
					Thread.sleep(3000);
				} finally {
					if (conn != null) conn.disconnect();
				}
	         }
	      }

	    } catch (Exception e) {
	        log.error("전체 지오코딩 처리 중 예외 발생", e);
	    }

	    return result;
	}

}
