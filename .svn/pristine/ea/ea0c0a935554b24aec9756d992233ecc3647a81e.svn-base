/**
 * 
 * <pre>
 * << 개정이력 (Modifcation 	Information) >>
 *  수정일 			수정자			수정내용
 * ----------------  ----------------- -----------------------------
 * 2025. 7. 7.			윤현식			생성
 */
document.addEventListener("DOMContentLoaded", () => {

	kakao.maps.load(() => {
		
		let currCategory = '';

		let map = new kakao.maps.Map(document.getElementById("map"), {
			center: new kakao.maps.LatLng(37.566826, 126.9786567),
			level: 7,
		});

		const geocoder = new kakao.maps.services.Geocoder();
		let dbMarkers = [];
		let placeMarkers = []
		let placeOverlay = new kakao.maps.CustomOverlay({ zIndex: 1 });
		let contentNode = document.createElement('div');
		contentNode.className = 'placeinfo_wrap';
		placeOverlay.setContent(contentNode);

		// 지도 컨트롤
		map.addControl(new kakao.maps.MapTypeControl(), kakao.maps.ControlPosition.TOPRIGHT);
		map.addControl(new kakao.maps.ZoomControl(), kakao.maps.ControlPosition.RIGHT);

		fetch("/main/map/search")
			.then(res => {
				if (!res.ok) throw new Error("지오코딩 요청 실패");
				return res.json();
			})
			.then(data => {
				console.log("✅ DB 주소 기반 마커 데이터:", data);
				data.forEach(({ lat, lng, address }) => {
					const latLng = new kakao.maps.LatLng(lat, lng);
					const marker = new kakao.maps.Marker({
						map: map,
						position: latLng,
					});

					const infowindow = new kakao.maps.InfoWindow({
						content: `<div style="padding:5px; font-size:12px;">${address}</div>`,
					});

					kakao.maps.event.addListener(marker, 'click', () => {
						infowindow.open(map, marker);
					});

					dbMarkers.push(marker);
				});
			})
			.catch(err => console.error("❌ 지오코딩 데이터 로드 실패:", err));


		// 카테고리 장소 검색
		const ps = new kakao.maps.services.Places(map);

		kakao.maps.event.addListener(map, 'idle', () => {
			if (currCategory) searchCategoryPlaces();
		});

		function searchCategoryPlaces() {
			placeOverlay.setMap(null);
			clearPlaceMarkers();
			ps.categorySearch(currCategory, categorySearchCallback, { useMapBounds: true });
		}

		function categorySearchCallback(data, status) {
			if (status !== kakao.maps.services.Status.OK) return;

			data.forEach(place => {
				const position = new kakao.maps.LatLng(place.y, place.x);
				const marker = new kakao.maps.Marker({
					position,
					map,
				});

				kakao.maps.event.addListener(marker, 'click', () => {
					displayPlaceOverlay(place);
				});

				placeMarkers.push(marker);
			});
		}

		function displayPlaceOverlay(place) {
			let content = `
        <div class="placeinfo">
          <a class="title" href="${place.place_url}" target="_blank">${place.place_name}</a>
          <span>${place.road_address_name || place.address_name}</span>
          <span class="tel">${place.phone || ''}</span>
        </div>
        <div class="after"></div>`;

			contentNode.innerHTML = content;
			placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));
			placeOverlay.setMap(map);
		}

		function clearPlaceMarkers() {
			placeMarkers.forEach(marker => marker.setMap(null));
			placeMarkers = [];
		}

		// 카테고리 버튼 이벤트
		document.querySelectorAll('#category > li').forEach(el => {
			el.addEventListener('click', function() {
				const id = this.id;
				const selected = this.classList.contains('on');

				document.querySelectorAll('#category > li').forEach(li => li.classList.remove('on'));
				placeOverlay.setMap(null);
				clearPlaceMarkers();

				if (selected) {
					currCategory = '';
				} else {
					this.classList.add('on');
					currCategory = id;
					searchCategoryPlaces();
				}
			});
		});

	});

});